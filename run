#!/usr/bin/env node
require("./jbash.js");

function help() {
  echo(`\
Usage: run command [--prod]

Runs commands for development tooling and production deployment

Commands:
  up                 Starts the development environment (default command)
  down               Stops the development environment and removes resources
  db:migration name  Creates a new migration
  db:up              Migrates the database up
  db:down            Migrates the database down
  logs               Shows logs
  psql               Starts a psql session in the development database

Commands that require --prod argument and use .env.production/HOST_NAME config:  
  provision          Provisions server   
  deploy             Deploys the application
  ssh                Starts ssh session    
`);
}

let command = $1 || "up";
const isProduction = $2 == "--prod";
const assertProduction = () => {
  if (!isProduction) {
    echo("This command is only available with --prod option");
    exit(1);
  }
};
const assertNotProduction = () => {
  if (isProduction) {
    echo("This command cannot be run with --prod option");
    exit(1);
  }
};
const sourceDefaultConfig = "set -a; . .env; set +a &&"; // (set -a exports all variables into environment)
const sourceProductionConfig = "set -a; . .env; . .env.production; set +a &&";
const sshURI = "ssh://root@$HOST_NAME";
const composeCommand = isProduction
  ? `${sourceProductionConfig}  docker-compose -H ${sshURI} -f docker-compose.yml  -f docker-compose.production.yml`
  : `${sourceDefaultConfig} docker-compose`;

switch (command) {
  case "up":
    exec(`${composeCommand} up --build`);
    break;
  case "down":
    assertNotProduction();
    exec(`${composeCommand} down -v`);
    break;
  case "db:migration":
    assertNotProduction();
    exec(
      `${composeCommand} run server sh -c 'cd /app/db && npx db-migrate create ${$2}'`
    );
    break;
  case "db:up":
    exec(
      `${composeCommand} run server sh -c 'cd /app/db && npx db-migrate up'`
    );
    break;
  case "db:down":
    exec(
      `${composeCommand} run server sh -c 'cd /app/db && npx db-migrate down'`
    );
    break;

  case "logs":
    exec(`${composeCommand} logs`);
    break;
  case "psql":
    exec(
      `${composeCommand} exec db psql -U $POSTGRES_SUPER_USER -d $POSTGRES_DB`
    );
    break;
  case "provision":
    assertProduction();
    exec(`${sourceProductionConfig} ssh ${sshURI} 'bash -s' < ./provision.sh`);
    break;
  case "deploy":
    assertProduction();
    exec(`${composeCommand} up -d --build`);
    echo("Deploy successful!");
    break;
  case "ssh":
    assertProduction();
    exec(`${sourceProductionConfig} ssh ${sshURI}`);
    break;

  default:
    help();
}
